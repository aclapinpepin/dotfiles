scriptencoding utf-8
set encoding=utf-8

" Vim-plug section
call plug#begin()

" My bundles
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-sort-motion'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'junegunn/fzf'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdtree'
Plug 'mileszs/ack.vim'
Plug 'djoshea/vim-autoread'
Plug 'jiangmiao/auto-pairs'

" Terraform
Plug 'hashivim/vim-terraform'

" Solidity
Plug 'tomlion/vim-solidity'

" Ruby/Rails
Plug 'vim-ruby/vim-ruby'
Plug 'kchmck/vim-coffee-script'

" Elixir
Plug 'elixir-lang/vim-elixir'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'jelera/vim-javascript-syntax'

" Syntax
Plug 'prettier/vim-prettier', { 'do': 'yarn install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }

" Colors
Plug 'nanotech/jellybeans.vim'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'w0ng/vim-hybrid'
Plug 'chriskempson/base16-vim'
Plug 'tomasr/molokai'
Plug 'sjl/badwolf/'
Plug 'marcopaganini/termschool-vim-theme'
Plug 'lu-ren/SerialExperimentsLain'
Plug 'nightsense/vim-crunchbang'
Plug 'roosta/vim-srcery'
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
call plug#end()

" Use the colorscheme from above

" Gruvbox config
" let g:gruvbox_contrast_dark = "soft"
set termguicolors
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"

set background=dark
colorscheme gruvbox

filetype plugin indent on

" Enable syntax highlighting
syntax on

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib
  autocmd FileType ruby,eruby,yaml setlocal textwidth=120
  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?

  " .conf files
  autocmd BufEnter,BufRead *.conf setf dosini

  " Git commits
  autocmd FileType gitcommit set textwidth=72
augroup END

" filenames like *.xml, *.html, *.xhtml, ...
let g:closetag_filenames = "*.html,*.xhtml,*.phtml"

" vim-javascript & vim-jsx config
let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0

" Easy access to the start of the line
nmap 0 ^

" Want to set this before any other
let mapleader = "\<space>"

nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Map Ctrl-s to write the file
nmap <C-S> :w<cr>
imap <C-S> <esc>:w<cr>

" Configuration for NerdTree
map <leader>k :NERDTreeToggle<CR>

" Git fugitive mappings
map <leader>g :Gstatus<CR>

" Turn off highlighting from a search
noremap <leader>h :nohlsearch<CR>

let $LANG = 'en'
set langmenu=none
set number
set nobackup
set nowritebackup
set cursorline
set numberwidth=3
set hidden
set backspace=indent,eol,start
set history=50
set laststatus=2
set ruler
set showcmd
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2
set list
set listchars=tab:!·,trail:·
set incsearch
set hlsearch
set ignorecase
set smartcase
set wildmenu

" Force vim to use old regex engine to speed up scrolling
set re=1

" Define backup directories
set backupdir=~/.vim/backup/
set directory=~/.vim/backup/

" Mappings for quick search & replace. Global set to default
" Do a / search first, then leave pattern empty in :s// to use previous
nnoremap <Leader>sub :%s///g<left><left>
vnoremap <Leader>sub :s///g<left><left>
nnoremap <leader>wub :%s//<C-r><C-w>/g<cr>

" Make it obvious where 120 characters is
set textwidth=120
set colorcolumn=+1

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Make ctrl-p use Silver Searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Access buffer with CtrlP plugin
map <leader>b :CtrlPBuffer<CR>

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" Allow us to use Ctrl-s and Ctrl-q as keybinds
silent !stty -ixon

" Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon

" Fix for Mac OS Sierra copy/paste
set clipboard=unnamed

" ack.vim configuration
nmap <LEADER>ck :Ack!<space>
nnoremap <leader>cc :cclose<cr>

function! s:VisualAck()
  let temp = @"
  normal! gvy
  let escaped_pattern = escape(@", "[]().*")
  let @" = temp
  execute "Ack! '" . escaped_pattern . "'"
endfunction

nnoremap K :Ack! '<C-r><C-w>'<cr>
vnoremap K :<C-u>call <sid>VisualAck()<cr>

let g:ackprg = 'ag --nogroup --nocolor --column'

" vim-prettier config
" Fire on save

" max line length that prettier will wrap on
" Prettier default: 80
let g:prettier#config#print_width = 120

" print spaces between brackets
" Prettier default: true
let g:prettier#config#bracket_spacing = 'true'

" none|es5|all
" Prettier default: none
let g:prettier#config#trailing_comma = 'none'
