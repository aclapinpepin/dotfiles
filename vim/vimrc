" Vim-plug section
call plug#begin()

" My bundles
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-obsession'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-conflicted'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'vim-ruby/vim-ruby'
Plug 'ervandew/supertab'
Plug 'kchmck/vim-coffee-script'
Plug 'Townk/vim-autoclose'
Plug 'alvan/vim-closetag'
Plug 'djoshea/vim-autoread'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'scrooloose/nerdtree'
Plug 'rking/ag.vim'

" Elixir
Plug 'elixir-lang/vim-elixir'

" Angular
Plug 'pangloss/vim-javascript'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'burnettk/vim-angular'
Plug 'moll/vim-node'

" Clojure
Plug 'tpope/vim-fireplace'
Plug 'guns/vim-clojure-static'

" Colors
Plug 'nanotech/jellybeans.vim'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'w0ng/vim-hybrid'
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16-vim'
Plug 'tomasr/molokai'
Plug 'sjl/badwolf/'
Plug 'marcopaganini/termschool-vim-theme'
call plug#end()

" Use the colorscheme from above
" colorscheme termschool
set background=dark
colorscheme hybrid

filetype plugin indent on

syntax on " Enable syntax highlighting

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
  autocmd FileType ruby,eruby,yaml setlocal path+=lib
  autocmd FileType ruby,eruby,yaml setlocal textwidth=120
  " Make ?s part of words
  autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?

  " Clojure
  autocmd FileType clojure setlocal colorcolumn=80
  autocmd FileType clojure map <Leader>t :!lein test<cr>

  " .conf files
  autocmd BufEnter,BufRead *.conf setf dosini

  " Git commits
  autocmd FileType gitcommit set textwidth=72
augroup END

" filenames like *.xml, *.html, *.xhtml, ...
let g:closetag_filenames = "*.html,*.xhtml,*.phtml"

" Easy access to the start of the line
nmap 0 ^

" Want to set this before any other
let mapleader = "\<space>"

nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Map Ctrl-s to write the file
nmap <C-s> :w<cr>
imap <C-s> <esc>:w<cr>

" Insert a byebug
map <leader>d orequire 'byebug'; byebug<ESC>

" Insert a pry
map <leader>p orequire 'pry'; binding.pry<ESC>

" Configuration for NerdTree
map <leader>k :NERDTreeToggle<CR>

" Turn off highlighting from a search
noremap <leader>h :nohlsearch<CR>

" Paste over words (or sentences, or paragraphs) with content of system clipboard
" Note, this must be nmap, not nnnoremap
nmap <leader>gr "*gr

set number
set relativenumber
set cursorline
set numberwidth=3
set hidden
set backspace=indent,eol,start
set history=500
set laststatus=2
set ruler
set showcmd
set autoindent
set expandtab
set shiftwidth=2
set softtabstop=2
set list
set listchars=tab:!·,trail:·
set incsearch
set hlsearch
if has('nvim')
  set mouse-=a
endif

" Make it obvious where 120 characters is
set textwidth=120
set colorcolumn=+1

" Have all swap files put in the same location
if has('nvim')
  set backupdir=~/config/.nvim/backup/
  set directory=~/config/.nvim/backup/
elseif
  set backupdir=~/.vim/backup/
  set directory=~/.vim/backup/
endif

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Make ctrl-p use Silver Searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Access buffer with CtrlP plugin
map <leader>b :CtrlPBuffer<CR>

" ag.vim configuration
let g:ag_working_path_mode="r"

" configuration for conflicted plugin
set stl+=%{ConflictedVersion()}

" Allow us to use Ctrl-s and Ctrl-q as keybinds
if !has('nvim')
  silent !stty -ixon
endif

" Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon

" Activate matchit.vim plugin
runtime macros/matchit.vim
